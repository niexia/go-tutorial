import{_ as n,c as a,o as s,d as t}from"./app.58266e30.js";const p='{"title":"数据类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本数据类型","slug":"基本数据类型"},{"level":2,"title":"类型转换","slug":"类型转换"},{"level":2,"title":"类型的预定义值","slug":"类型的预定义值"},{"level":2,"title":"指针类型","slug":"指针类型"}],"relativePath":"guide/基本程序结构/数据类型.md","lastUpdated":1632201413253}',e={},o=[t('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h1><h2 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">数据类型</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td></tr><tr><td style="text-align:left;">String</td></tr><tr><td style="text-align:left;">int int8 int16 int32 int64</td></tr><tr><td style="text-align:left;">unit unit8 unit16 unit32 unit64 unitptr</td></tr><tr><td style="text-align:left;">byte // alias for unit8</td></tr><tr><td style="text-align:left;">rune // alias for int64, represents a Unicode code point</td></tr><tr><td style="text-align:left;">float32 float64</td></tr><tr><td style="text-align:left;">complex64 complex128</td></tr></tbody></table><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-hidden="true">#</a></h2><ol><li>Go 不允许隐式类型转换（js “太灵活了”）</li><li>别名和原有类型也不能进行隐式类型转换</li></ol><div class="language-go"><pre><code><span class="token keyword">package</span> type_test\n\n<span class="token keyword">import</span> <span class="token string">&quot;testing&quot;</span>\n\n<span class="token keyword">type</span> MyInt <span class="token builtin">int64</span>\n\n<span class="token keyword">func</span> <span class="token function">TestImplicit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> a <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">1</span>\n\t<span class="token keyword">var</span> b <span class="token builtin">int64</span>\n\tb <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n\t<span class="token keyword">var</span> c MyInt\n\tc <span class="token operator">=</span> <span class="token function">MyInt</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>虽然我们自定义了类型 <code>MyInt</code> 实际是 <code>init64</code>，但是赋值的时候同样也需要进行类型转换。</p><h2 id="类型的预定义值" tabindex="-1">类型的预定义值 <a class="header-anchor" href="#类型的预定义值" aria-hidden="true">#</a></h2><p>以下这些类型的预定义值，都可以从 <code>math</code> 中获取到</p><ol><li>math.MaxInt64</li><li>math.MaxFloat64</li><li>math.MaxUint32</li></ol><h2 id="指针类型" tabindex="-1">指针类型 <a class="header-anchor" href="#指针类型" aria-hidden="true">#</a></h2><p>与其他语言的差异</p><ol><li>支持指针类型，但是<strong>不支持指针运算</strong></li><li>string 是数值类型，其默认值的初始化值为空字符串，而不是 <code>nil</code></li></ol><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">TestPoint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ta <span class="token operator">:=</span> <span class="token number">1</span>\n\taPtr <span class="token operator">:=</span> <span class="token operator">&amp;</span>a <span class="token comment">// 通过取值符获取 a 的指针</span>\n  <span class="token comment">// aPtr = aPtr + 1 // 进行指针运算会报错</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> aPtr<span class="token punctuation">)</span> <span class="token comment">// 1 0xc000016210</span>\n\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;%T %T&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> aPtr<span class="token punctuation">)</span> <span class="token comment">// int *int</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">TestString</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> s <span class="token builtin">string</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span> <span class="token comment">// **</span>\n  t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',14)];var c=n(e,[["render",function(n,t,p,e,c,l){return s(),a("div",null,o)}]]);export{p as __pageData,c as default};
