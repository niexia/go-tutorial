import{_ as n,c as s,o as a,d as t}from"./app.202eef8d.js";const p='{"title":"字符串","description":"","frontmatter":{},"headers":[{"level":2,"title":"Unicode UTF 8","slug":"unicode-utf-8"},{"level":3,"title":"编码和存储","slug":"编码和存储"},{"level":2,"title":"常用字符串函数","slug":"常用字符串函数"}],"relativePath":"guide/字符串/字符串.md","lastUpdated":1632212524969}',o={},e=[t('<h1 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-hidden="true">#</a></h1><p>和其他主要编程语言的差异</p><ol><li>string 是<strong>数据类型</strong>，不是引用或指针类型</li><li>string 是只读的 byte slice，len 函数可以获取它所包含的 byte 数</li><li>string 的 byte 数组可以存放任何数据</li></ol><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">TestString</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> s <span class="token builtin">string</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 初始化默认值为 &quot;&quot;</span>\n\ts <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5：是英文字母的长度</span>\n\n\t<span class="token comment">// string 是不可变的 byte slice</span>\n\t<span class="token comment">// s[1] = &quot;3&quot; // cannot assign to s[1] (value of type byte)</span>\n\t\n  <span class="token comment">// 可以存储任何二进制数据</span>\n  <span class="token comment">// 长度为 3，由 3 个 byte 组成</span>\n  <span class="token comment">// 实际一个中文字，所以 len 不一定是字符长度</span>\n\ts <span class="token operator">=</span> <span class="token string">&quot;\\xE4\\xB8\\xA5&quot;</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 严</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="unicode-utf-8" tabindex="-1">Unicode UTF 8 <a class="header-anchor" href="#unicode-utf-8" aria-hidden="true">#</a></h2><ol><li>Unicode 是一种字符集（code point）</li><li>UTF8 是 unicode 的存储实现（转换为字节序列的规则）</li></ol><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">TestUnicode</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> s <span class="token builtin">string</span>\n\ts <span class="token operator">=</span> <span class="token string">&quot;中&quot;</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3：byte 数</span>\n\n\tc <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// rune 返回 unicode</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1：unicode 只有一个</span>\n\n\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;中 unicode %x&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 4e2d</span>\n\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;中 UTF8 %x&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// e4b8ad</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="编码和存储" tabindex="-1">编码和存储 <a class="header-anchor" href="#编码和存储" aria-hidden="true">#</a></h3><table><thead><tr><th>字符</th><th>中</th></tr></thead><tbody><tr><td>Unicode</td><td>0x4E2D</td></tr><tr><td>UTF-9</td><td>0xE4B8AD</td></tr><tr><td>string</td><td>[0xE4,0xB8,0xAD]</td></tr></tbody></table><h2 id="常用字符串函数" tabindex="-1">常用字符串函数 <a class="header-anchor" href="#常用字符串函数" aria-hidden="true">#</a></h2><ol><li>strings 包：<a href="https://pkg.go.dev/strings" target="_blank" rel="noopener noreferrer">strings</a></li><li>strconv 包：<a href="https://pkg.go.dev/strconv" target="_blank" rel="noopener noreferrer">strconv</a></li></ol><div class="language-go"><pre><code><span class="token keyword">package</span> string_fn\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">&quot;strings&quot;</span>\n  <span class="token string">&quot;strconv&quot;</span>\n\t<span class="token string">&quot;testing&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">TestStringFn</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ts <span class="token operator">:=</span> <span class="token string">&quot;A,B,C&quot;</span>\n\tparts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> part <span class="token operator">:=</span> <span class="token keyword">range</span> parts <span class="token punctuation">{</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">TestStringConvert</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ts <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',12)];var c=n(o,[["render",function(n,t,p,o,c,u){return a(),s("div",null,e)}]]);export{p as __pageData,c as default};
