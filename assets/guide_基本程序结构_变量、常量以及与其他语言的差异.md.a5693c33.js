import{_ as t,c as n,o as a,d as s}from"./app.58266e30.js";const e='{"title":"变量、常量以及与其他语言的差异","description":"","frontmatter":{},"headers":[{"level":2,"title":"文件名","slug":"文件名"},{"level":2,"title":"关键字","slug":"关键字"},{"level":2,"title":"预定义标识符","slug":"预定义标识符"},{"level":2,"title":"编写测试程序","slug":"编写测试程序"},{"level":2,"title":"先看 🌰","slug":"先看-🌰"},{"level":2,"title":"变量赋值","slug":"变量赋值"},{"level":2,"title":"常量定义","slug":"常量定义"}],"relativePath":"guide/基本程序结构/变量、常量以及与其他语言的差异.md","lastUpdated":1632201413253}',p={},o=[s('<h1 id="变量、常量以及与其他语言的差异" tabindex="-1">变量、常量以及与其他语言的差异 <a class="header-anchor" href="#变量、常量以及与其他语言的差异" aria-hidden="true">#</a></h1><h2 id="文件名" tabindex="-1">文件名 <a class="header-anchor" href="#文件名" aria-hidden="true">#</a></h2><p>Go 的源文件以 <code>.go</code> 为后缀名存储在计算机中，这些文件名均由小写字母组成，如 scanner.go 。</p><p>如果文件名由多个部分组成，则使用下划线 <code>_</code> 对它们进行分隔，如 scanner_test.go 。文件名不包含空格或其他特殊字符。</p><p>你会发现在 Go 代码中的几乎所有东西都有一个名称或标识符。另外，Go 语言也是区分大小写的，这与 C 家族中的其它语言相同。<strong>有效的标识符必须以字母（可以使用任何 UTF-8 编码的字符或 _）开头，然后紧跟着 0 个或多个字符或 Unicode 数字</strong>，如：X56、group1、_x23、i、өԑ12。</p><h2 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-hidden="true">#</a></h2><p>Go 总共有 25 个关键字或者保留字</p><table><tr><td>break</td><td>default</td><td>func</td><td>interface</td><td>select</td></tr><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></table><p>之所以刻意地将 Go 代码中的关键字保持的这么少，是为了简化在编译过程第一步中的代码解析。和其它语言一样，关键字不能够作标识符使用。</p><h2 id="预定义标识符" tabindex="-1">预定义标识符 <a class="header-anchor" href="#预定义标识符" aria-hidden="true">#</a></h2><p>Go 语言还有 36 个预定义标识符，其中包含了基本类型的名称和一些基本的内置函数。</p><table><tr><td>append</td><td>bool</td><td>byte</td><td>cap</td><td>close</td><td>complex</td><td>complex64</td><td>complex128</td><td>uint16</td></tr><tr><td>copy</td><td>false</td><td>float32</td><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td><td>nil</td><td>panic</td><td>uint64</td></tr><tr><td>print</td><td>println</td><td>real</td><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintptr</td></tr></table><h2 id="编写测试程序" tabindex="-1">编写测试程序 <a class="header-anchor" href="#编写测试程序" aria-hidden="true">#</a></h2><ol><li>源码文件以 <code>_test</code> 结尾：<code>xxx_test.go</code></li><li>测试函数以 <code>Test</code> 开头：<code>func TestXXX(t *testing.T) {...}</code></li><li></li></ol><h2 id="先看-🌰" tabindex="-1">先看 🌰 <a class="header-anchor" href="#先看-🌰" aria-hidden="true">#</a></h2><p>实现一个 Fibonacci 数列</p><div class="language-go"><pre><code><span class="token comment">// fib_test.go</span>\n<span class="token keyword">func</span> <span class="token function">TestFibList</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// var a int = 1</span>\n\t<span class="token comment">// var b int = 2</span>\n\t<span class="token comment">// var (</span>\n\t<span class="token comment">// \ta int = 1</span>\n\t<span class="token comment">// \tb = 1</span>\n\t<span class="token comment">// )</span>\n\t<span class="token comment">// 类型推断</span>\n\ta <span class="token operator">:=</span> <span class="token number">1</span>\n\tb <span class="token operator">:=</span> <span class="token number">2</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n\t\ttmp <span class="token operator">:=</span> a\n\t\ta <span class="token operator">=</span> b\n\t\tb <span class="token operator">=</span> tmp <span class="token operator">+</span> a\n\t<span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="变量赋值" tabindex="-1">变量赋值 <a class="header-anchor" href="#变量赋值" aria-hidden="true">#</a></h2><p>和其他主要语言的差异</p><ul><li>赋值可以进行自动类型推断，不声明数据类型</li><li>在一个赋值语句中可以对多个变量同时赋值</li></ul><p>第 2 点在变量交换值的时候很方便</p><div class="language-go"><pre><code>a <span class="token operator">:=</span> <span class="token number">1</span>\nb <span class="token operator">:=</span> <span class="token number">2</span>\n<span class="token comment">// tmp := a</span>\n<span class="token comment">// a = b</span>\n<span class="token comment">// b = tmp</span>\na<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token comment">// 直接可以交换</span>\n</code></pre></div><h2 id="常量定义" tabindex="-1">常量定义 <a class="header-anchor" href="#常量定义" aria-hidden="true">#</a></h2><p>与其他语言的差异：快速设置连续值</p><div class="language-go"><pre><code><span class="token keyword">const</span> <span class="token punctuation">(</span>\n  Monday <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>\n  Tuesday\n  Wednesday\n  ThursDay\n  Friday\n  Saturday\n  Sunday\n<span class="token punctuation">)</span>\n</code></pre></div>',25)];var d=t(p,[["render",function(t,s,e,p,d,c){return a(),n("div",null,o)}]]);export{e as __pageData,d as default};
