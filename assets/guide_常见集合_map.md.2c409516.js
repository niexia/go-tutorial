import{_ as n,c as s,o as a,d as t}from"./app.ab67f476.js";const p='{"title":"map","description":"","frontmatter":{},"headers":[{"level":2,"title":"map 声明","slug":"map-声明"},{"level":2,"title":"Map 遍历","slug":"map-遍历"}],"relativePath":"guide/常见集合/map.md","lastUpdated":1632207195116}',o={},c=[t('<h1 id="map" tabindex="-1">map <a class="header-anchor" href="#map" aria-hidden="true">#</a></h1><h2 id="map-声明" tabindex="-1">map 声明 <a class="header-anchor" href="#map-声明" aria-hidden="true">#</a></h2><div class="language-go"><pre><code>m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span> <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>\n\nm1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nm1<span class="token punctuation">[</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\n\nm2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token comment">/* Initial Capacity*/</span><span class="token punctuation">)</span>\n<span class="token comment">// 为什么不初始化 len？</span>\n<span class="token comment">// 在切片中设置 len 的话就初始化默认值为 0，</span>\n<span class="token comment">// 但是在 map 中这是做不到的，所以没有这个 len</span>\n</code></pre></div><p>接下来看一个🌰</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">TestInitMap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tm1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;len m1=%d&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n\n\tm2 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\tm2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span>\n\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;len m2=%d&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n\n\tm3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;len m3=%d&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\n\t<span class="token comment">// t.Logf(&quot;len m3=%d&quot;, cap(m3)) // 不能求 cap，invalid argument m3 (type map[int]int) for cap</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>注意 map 访问一个不存在的 key，它的值默认返回 0，那怎么区分不存在还是本来就是 0？</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">TestAccessNotExistingKey</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tm1<span class="token operator">:=</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0: 访问不存在的输出 0</span>\n\n\tm1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 0，也是 0 那怎么区分？</span>\n\n\t<span class="token comment">// 需要主动判断</span>\n\t<span class="token keyword">if</span> v<span class="token punctuation">,</span>ok<span class="token operator">:=</span>m1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;key 3 is existing&quot;</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;key 3 is not existing.&quot;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="map-遍历" tabindex="-1">Map 遍历 <a class="header-anchor" href="#map-遍历" aria-hidden="true">#</a></h2><p>和数组类似，通过 <code>range</code>:</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">TestTravelMap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tm1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span>\n\t<span class="token keyword">for</span> k<span class="token punctuation">,</span>v<span class="token operator">:=</span><span class="token keyword">range</span> m1 <span class="token punctuation">{</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',10)];var e=n(o,[["render",function(n,t,p,o,e,u){return a(),s("div",null,c)}]]);export{p as __pageData,e as default};
