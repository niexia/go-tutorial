import{_ as n,c as s,o as a,d as t}from"./app.67c79e3a.js";const p='{"title":"Map 和工厂模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"实现 Set","slug":"实现-set"}],"relativePath":"guide/常见集合/map和工厂模式.md","lastUpdated":1632210002796}',o={},c=[t('<h1 id="map-和工厂模式" tabindex="-1">Map 和工厂模式 <a class="header-anchor" href="#map-和工厂模式" aria-hidden="true">#</a></h1><p>首先</p><ul><li>Map 的 value 可以是一个方法</li><li>与 Go 的 Dock type 接口方式一起，可以方便的实现单一方法对象的工厂模式</li></ul><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">TestMapWithFunValue</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tm <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\tm<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> op<span class="token punctuation">}</span>\n\tm<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> op<span class="token operator">*</span>op<span class="token punctuation">}</span>\n\tm<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> op<span class="token operator">*</span>op<span class="token operator">*</span>op<span class="token punctuation">}</span>\n\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="实现-set" tabindex="-1">实现 Set <a class="header-anchor" href="#实现-set" aria-hidden="true">#</a></h2><p>Go 的内置集合中没有 Set 实现，可以 map[type]bool 来实现</p><ul><li>元素的唯一性</li><li>基本操作 <ul><li>添加元素</li><li>判断元素是否存在</li><li>删除元素</li><li>元素个数</li></ul></li></ul><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">TestMapForSet</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tmySet <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n\tmySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n\tn<span class="token operator">:=</span><span class="token number">1</span>\n\t<span class="token keyword">if</span> mySet<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;%d is existing&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;%d is not existing&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\tmySet<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\t<span class="token function">delete</span><span class="token punctuation">(</span>mySet<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\tn <span class="token operator">=</span> <span class="token number">1</span>\n\t<span class="token keyword">if</span> mySet<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;%d is existing&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;%d is not existing&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',8)];var e=n(o,[["render",function(n,t,p,o,e,u){return a(),s("div",null,c)}]]);export{p as __pageData,e as default};
