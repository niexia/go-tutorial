import{o as n,c as a,d as s}from"./app.74d4a0b3.js";const t='{"title":"数据类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本数据类型","slug":"基本数据类型"},{"level":2,"title":"类型转换","slug":"类型转换"},{"level":2,"title":"类型的预定义值","slug":"类型的预定义值"},{"level":2,"title":"指针类型","slug":"指针类型"}],"relativePath":"guide/基本程序结构/数据类型.md","lastUpdated":1632067650461}',p={},e=[s('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h1><h2 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a></h2><table><thead><tr><th>--</th><th>--</th></tr></thead><tbody><tr><td>ssdsd</td><td></td></tr></tbody></table><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-hidden="true">#</a></h2><ol><li>Go 不允许隐式类型转换</li><li>别名和原有类型也不能进行隐式类型转换</li></ol><div class="language-go"><pre><code><span class="token keyword">package</span> type_test\n\n<span class="token keyword">import</span> <span class="token string">&quot;testing&quot;</span>\n\n<span class="token keyword">type</span> MyInt <span class="token builtin">int64</span>\n\n<span class="token keyword">func</span> <span class="token function">TestImplicit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> a <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">1</span>\n\t<span class="token keyword">var</span> b <span class="token builtin">int64</span>\n\tb <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n\t<span class="token keyword">var</span> c MyInt\n\tc <span class="token operator">=</span> <span class="token function">MyInt</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="类型的预定义值" tabindex="-1">类型的预定义值 <a class="header-anchor" href="#类型的预定义值" aria-hidden="true">#</a></h2><p>以下这些类型的预定义值，都可以从 <code>math</code> 中获取到</p><ol><li>math.MaxInt64</li><li>math.MaxFloat64</li><li>math.MaxUint32</li></ol><h2 id="指针类型" tabindex="-1">指针类型 <a class="header-anchor" href="#指针类型" aria-hidden="true">#</a></h2><p>与其他语言的差异</p><ol><li>支持指针类型，但是不支持指针运算</li><li>string 是值类型，其默认值的初始化值为空字符串，而不是 <code>nil</code></li></ol><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">TestPoint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ta <span class="token operator">:=</span> <span class="token number">1</span>\n\taPtr <span class="token operator">:=</span> <span class="token operator">&amp;</span>a\n\tt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> aPtr<span class="token punctuation">)</span> <span class="token comment">// 1 0xc000016210</span>\n\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;%T %T&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> aPtr<span class="token punctuation">)</span> <span class="token comment">// int *int</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',13)];p.render=function(s,t,p,o,c,l){return n(),a("div",null,e)};export{t as __pageData,p as default};
