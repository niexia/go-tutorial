import{_ as n,c as a,o as s,d as o}from"./app.ab67f476.js";const t='{"title":"编写第一个 Go 程序","description":"","frontmatter":{},"headers":[{"level":2,"title":"开发环境变量设置","slug":"开发环境变量设置"},{"level":2,"title":"应用程序的入口","slug":"应用程序的入口"},{"level":2,"title":"退出返回值","slug":"退出返回值"},{"level":2,"title":"获取命令行参数","slug":"获取命令行参数"},{"level":2,"title":"格式化代码","slug":"格式化代码"}],"relativePath":"guide/Go简介/编写第一个Go程序.md","lastUpdated":1632207195116}',e={},p=[o('<h1 id="编写第一个-go-程序" tabindex="-1">编写第一个 Go 程序 <a class="header-anchor" href="#编写第一个-go-程序" aria-hidden="true">#</a></h1><h2 id="开发环境变量设置" tabindex="-1">开发环境变量设置 <a class="header-anchor" href="#开发环境变量设置" aria-hidden="true">#</a></h2><p>Go 开发环境依赖于一些操作系统环境变量，你最好在安装 Go 之前就已经设置好他们。</p><ul><li><p><code>$GOROOT</code> 表示 Go 在你的电脑上的安装位置，它的值一般都是 $HOME/go，当然，你也可以安装在别的地方。</p></li><li><p><code>$GOARCH</code> 表示目标机器的处理器架构，它的值可以是 386、amd64 或 arm。</p></li><li><p><code>$GOOS</code> 表示目标机器的操作系统，它的值可以是 darwin、freebsd、linux 或 windows。</p></li><li><p><code>$GOBIN</code> 表示编译器和链接器的安装位置，默认是 <code>$GOROOT/bin</code>，如果你使用的是 Go 1.0.3 及以后的版本，一般情况下你可以将它的值设置为空，Go 将会使用前面提到的默认值。目标机器是指你打算运行你的 Go 应用程序的机器。</p><p>Go 编译器支持交叉编译，也就是说你可以在一台机器上构建运行在具有不同操作系统和处理器架构上运行的应用程序，也就是说编写源代码的机器可以和目标机器有完全不同的特性（操作系统与处理器架构）。</p><p>为了区分本地机器和目标机器，你可以使用 <code>$GOHOSTOS</code> 和<code> $GOHOSTARCH</code> 设置本地机器的操作系统名称和编译体系结构，这两个变量只有在进行交叉编译的时候才会用到，如果你不进行显示设置，他们的值会和本地机器（<code>$GOOS</code> 和 <code>$GOARCH</code>）一样。</p></li><li><p><code>$GOPATH</code> 默认采用和<code> $GOROOT</code> 一样的值，但从 Go 1.1 版本开始，你必须修改为其它路径。它可以包含多个 Go 语言源码文件、包文件和可执行文件的路径，而这些路径下又必须分别包含三个规定的目录：src、pkg 和 bin，这三个目录分别用于存放源码文件、包文件和可执行文件。</p><p>在 Go 1.8 版本之前，<code>$GOPATH</code> 环境变量默认是空的。从 Go 1.8 版本开始，Go 开发包在安装完成后会为 <code>$GOPATH</code> 设置一个默认目录，</p></li><li><p><code>$GOARM</code> 专门针对基于 arm 架构的处理器，它的值可以是 5 或 6，默认为 6。</p></li><li><p><code>$GOMAXPROCS</code> 用于设置应用程序可使用的处理器个数与核数</p></li></ul><h2 id="应用程序的入口" tabindex="-1">应用程序的入口 <a class="header-anchor" href="#应用程序的入口" aria-hidden="true">#</a></h2><ol><li>必须是 <code>main</code> 包： <code>package main</code></li><li>必须是 <code>main</code> 方法：<code>func main()</code></li><li>文件名不一定是 <code>main.go</code></li></ol><h2 id="退出返回值" tabindex="-1">退出返回值 <a class="header-anchor" href="#退出返回值" aria-hidden="true">#</a></h2><p>与其他程序的不同</p><ul><li>Go 中 <code>main</code> 不支持任何返回值</li><li>通过 <code>os.Exit</code> 来返回状态</li></ul><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>\n\tos<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="获取命令行参数" tabindex="-1">获取命令行参数 <a class="header-anchor" href="#获取命令行参数" aria-hidden="true">#</a></h2><p>与其他语言的差异</p><ul><li><code>main</code> 不支持传入参数</li></ul><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span>arg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li>在程序中通过 <code>os.Args</code> 获取命令行参数</li></ul><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n<span class="token keyword">import</span> <span class="token string">&quot;os&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="格式化代码" tabindex="-1">格式化代码 <a class="header-anchor" href="#格式化代码" aria-hidden="true">#</a></h2><p>Go 开发团队不想要 Go 语言像许多其它语言那样总是在为代码风格而引发无休止的争论，浪费大量宝贵的开发时间，因此他们制作了一个工具：<strong>go fmt（gofmt）</strong>。</p><p>这个工具可以将你的源代码格式化成符合官方统一标准的风格，属于语法风格层面上的小型重构。遵循统一的代码风格是 Go 开发中无可撼动的铁律，因此你必须在编译或提交版本管理系统之前使用 <code>gofmt</code> 来格式化你的代码。</p><p>在命令行输入:</p><ul><li><code>gofmt –w program.go</code> 会格式化该源文件的代码然后将格式化后的代码覆盖原始内容（如果不加参数 -w 则只会打印格式化后的结果而不重写文件）；</li><li><code>gofmt -w *.go</code> 会格式化并重写所有 Go 源文件；</li><li><code>gofmt map1</code> 会格式化并重写 map1 目录及其子目录下的所有 Go 源文件。</li></ul><p><code>gofmt</code> 也可以通过在参数 <code>-r</code> 后面加入用双引号括起来的替换规则实现代码的简单重构，规则的格式：<strong>&lt;原始内容&gt; -&gt; &lt;替换内容&gt;</strong>。</p><div class="language-shell"><pre><code><span class="token comment"># 将源文件中没有意义的括号去掉。</span>\ngofmt -r <span class="token string">&#39;(a) -&gt; a&#39;</span> –w *.go\n\n<span class="token comment"># 将源文件中多余的 len(a) 去掉</span>\ngofmt -r <span class="token string">&#39;a[n:len(a)] -&gt; a[n:]&#39;</span> –w *.go\n\n<span class="token comment"># 将源文件中符合条件的函数的参数调换位置</span>\ngofmt –r <span class="token string">&#39;A.Func1(a,b) -&gt; A.Func2(b,a)&#39;</span> –w *.go\n</code></pre></div>',23)];var c=n(e,[["render",function(n,o,t,e,c,l){return s(),a("div",null,p)}]]);export{t as __pageData,c as default};
